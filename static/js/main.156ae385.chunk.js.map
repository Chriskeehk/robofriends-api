{"version":3,"sources":["Card.js","CardList.js","Scroll.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","shuffleArray","array","length","j","Math","floor","random","temp","App","mySearchFun","event","searchfield","target","value","date1","Date","console","log","fetch","then","response","json","users","setInterval","tick1","filteredRobots","filter","robot","toLowerCase","includes","toLocaleTimeString","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAgBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE5B,OAEC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAMF,GACN,2BAAKC,MCeMK,EAtBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAIlB,OACC,6BAEGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCPTW,EAPA,SAACC,GACd,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,WCiBIC,G,6DAnBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAW,GAHM,E,8DAOAC,EAAOC,GACzBC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAI3B,OAAIG,KAAKJ,MAAMC,SACP,wDAEDG,KAAKX,MAAMK,a,GAhBOQ,cCM3B,SAASC,EAAaC,GAEpB,IADA,IAAIlB,EAAIkB,EAAMC,OAAS,EAChBnB,EAAI,EAAGA,IAAK,CACjB,IAAMoB,EAAIC,KAAKC,MAAMD,KAAKE,UAAYvB,EAAI,IACpCwB,EAAON,EAAMlB,GACnBkB,EAAMlB,GAAKkB,EAAME,GACjBF,EAAME,GAAKI,EAEb,OAAON,E,IAyEMO,E,kDArEd,aAAe,IAAD,8BACb,gBA8BDC,YAAc,SAACC,GACd,EAAKZ,SAAS,CAAEa,YAAaD,EAAME,OAAOC,SA9B1C,EAAKpB,MAAQ,CAGZb,OAAQ,GACR+B,YAAa,GACbG,MAAQ,IAAIC,MAEbC,QAAQC,IAAI,iBATC,E,gEAYU,IAAD,OACnBC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAa,EAAKxB,SAAS,CAAClB,OAAS0C,OAG3CC,aAAY,kBAAM,EAAKC,UACrB,KAEFR,QAAQC,IAAI,yB,8BAIZpB,KAAKC,SAAS,CACZgB,MAAO,IAAIC,S,+BASR,IAAD,OACFU,EAAiB5B,KAAKJ,MAAMb,OAAO8C,QAAO,SAAAC,GAC/C,OAAOA,EAAMtD,KAAKuD,cAAcC,SAAS,EAAKpC,MAAMkB,YAAYiB,kBAIjE,OAFAZ,QAAQC,IAAI,YAEqB,IAA7BpB,KAAKJ,MAAMb,OAAOsB,OACb,uCAGR,yBAAK1B,UAAY,MAChB,wBAAIA,UAAY,MAAhB,eACA,qCAAWqB,KAAKJ,MAAMqB,MAAMgB,qBAA5B,KACA,6BACC,2BACCtD,UAAU,mCACVuD,KAAK,SACLC,YAAY,gBACZC,SAAUpC,KAAKY,eAGjB,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU7B,OAAQoB,EAAayB,Y,GA3DnB1B,aCPEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLqB,QAAQrB,MAAMA,EAAMsD,a","file":"static/js/main.156ae385.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\t//const { name, email, id} = props; // Destructure make name = props.name\n\treturn (\n\t\t//<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t<div className='tc bg-light-green dib br4 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{ name }</h2>\n\t\t\t\t<p>{ email }</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\t// if (true) {\n\t// \tthrow new Error('New Error')\n\t// }\n\treturn (\n\t\t<div>\n\t\t\t\t{\n\t\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\temail={robots[i].email} \n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t</div>\t\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n\t\treturn (\n\t\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}} >\t\n\t\t\t\t{props.children}\n\t\t\t</div>\n\t\t);\n}\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\thasError:  false\n\t\t}\n\t}\n\n\tcomponentDidCatch (error, info) {\n\t\tthis.setState({ hasError : true})\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oooops. That is not good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from './CardList';\n// import {robots_array } from './robots';\nimport Scroll from './Scroll';\nimport 'tachyons';\nimport './App.css';\nimport ErrorBoundry from './ErrorBoundry';\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\t// Var Name : Init Value\n\t\t\t//robots: robots_array,\n\t\t\trobots: [],\n\t\t\tsearchfield: '',\n\t\t\tdate1:  new Date()\n\t\t}\n\t\tconsole.log('1 Constructor')\n\t}\n\t\t// Like a Start\n\t  \tcomponentDidMount() {\n\t  \t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t  \t\t\t.then(response => response.json())\n\t  \t\t\t.then(users    => {this.setState({robots : users})})\t\n\n\t  \t//\tthis.setState({robots : robots_array});\n\t\t    setInterval(() => this.tick1(),\n\t\t      5000\n\t\t    )\n\t\t    console.log('2 componentDidMount')\n\t  \t}\n\n\t\ttick1() {\n\t\t    this.setState({\n\t\t      date1: new Date()\n\t\t    })\n\t\t    //this.setState({ searchfield: \"Yanis\" })\n\t\t}\n\t\n\tmySearchFun = (event) => {\n\t\tthis.setState({ searchfield: event.target.value })\n\t}\n\n\trender() {\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\t\t})\n\t\tconsole.log('3 render')\n\n\t\tif (this.state.robots.length === 0) {\n\t\t\t\treturn <h1>Loading</h1>\n\t\t} else {\n\t\t\treturn (\n\t\t\t<div className = 'tc'>\n\t\t\t\t<h1 className = 'f1'>RoboFriends</h1>\n\t\t\t\t<h2>It is {this.state.date1.toLocaleTimeString()}.</h2>\n\t\t\t\t<div>\n\t\t\t\t\t<input \n\t\t\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\t\t\ttype='search' \n\t\t\t\t\t\tplaceholder='search robots' \n\t\t\t\t\t\tonChange={this.mySearchFun} \n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={shuffleArray(filteredRobots)}/>\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t\t\n\t\t\t</div>\n\t\t);\n\t\t}\n\t\t\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}